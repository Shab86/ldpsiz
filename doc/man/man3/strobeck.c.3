.TH "strobeck.c" 3 "Sat Jun 6 2015" "Version 0.1" "ldpsiz" \" -*- nroff -*-
.ad l
.nh
.SH NAME
strobeck.c \- 
.PP
Calculate sigma_d^2 using recurrence equations of Strobeck and Morgan (1978), and Hudson (1985)\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <gsl/gsl_errno\&.h>\fP
.br
\fC#include <gsl/gsl_matrix\&.h>\fP
.br
\fC#include 'pophist\&.h'\fP
.br
\fC#include 'misc\&.h'\fP
.br
\fC#include 'model\&.h'\fP
.br
\fC#include 'string\&.h'\fP
.br
\fC#include 'strobeck\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBStrobeckData\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBDIM\fP   5"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBStrobeck_exactLD\fP (double c, double u, \fBPopHist\fP *ph, int twoNsmp, void *data)"
.br
.ti -1c
.RI "static int \fBonestep\fP (const double yy1[], double y2[], double twoN, double c, double u)"
.br
.RI "\fIMove the state vector forward one generation, using recurrence equations of Strobeck and Morgan (1978, see Eqn 3, p 833)\&. \fP"
.ti -1c
.RI "static int \fBiterate\fP (double y[], int t, double twoN, double c, double u)"
.br
.RI "\fIIterate the difference equation across t generations\&. \fP"
.ti -1c
.RI "static void \fBgeteq_c_mid\fP (double x[DIM], double twoN, double c, double u, double fourNu)"
.br
.ti -1c
.RI "void * \fBStrobeckData_new\fP (void)"
.br
.RI "\fIAllocate a new object of type \fBStrobeckData\fP\&. \fP"
.ti -1c
.RI "double \fBStrobeckData_stateVal\fP (void *vdata, unsigned i)"
.br
.RI "\fIi'th state value \fP"
.ti -1c
.RI "void \fBStrobeckData_free\fP (void *p)"
.br
.ti -1c
.RI "\fBModel\fP * \fBModel_allocStrobeck\fP (int twoNsmp)"
.br
.ti -1c
.RI "double \fBStrobeck_sigdsqEq\fP (double c, double u, \fBPopHist\fP *ph, unsigned whichEpoch, int twoNsmp, void *vdata)"
.br
.RI "\fISet state vector to equilibrium for epoch 'whichEpoch' and then use it to calculate sigmdsq\&. \fP"
.ti -1c
.RI "double \fBStrobeck_sigdsq\fP (\fBODE\fP *ode, double c, double u, \fBPopHist\fP *ph, int twoNsmp)"
.br
.RI "\fISet state vector to initial equilibrium, then evolve it through the population history, and then use this state vector to calculate sigmdsq\&. \fP"
.ti -1c
.RI "size_t \fBStrobeck_stateDim\fP (void)"
.br
.ti -1c
.RI "const char * \fBStrobeck_stateLbl\fP (unsigned i)"
.br
.ti -1c
.RI "int \fBStrobeck_dydt\fP (double t_notused, const double yy1[], double f[], void *params)"
.br
.RI "\fIThis function calculates the difference, from one generation to the next, for each of the 5 identity coefficients\&. \fP"
.ti -1c
.RI "int \fBStrobeck_geteq\fP (double x[], double twoN, double c, double u)"
.br
.RI "\fIFill x vector with equilibrium values given on pp 833-834 of Strobeck and Morgan\&. \fP"
.ti -1c
.RI "double \fBStrobeck_get_sigdsq\fP (double y[], int twoNsmp)"
.br
.RI "\fICalculate sigma_d^2 from state vector\&. \fP"
.ti -1c
.RI "int \fBStrobeck_evolveDiscrete\fP (double y[], \fBPopHist\fP *ph, double c, double u)"
.br
.RI "\fIEvolve through all epochs of population history, using step size h and beginning with initial equilibrium\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const char * \fBstateLbl\fP [DIM]"
.br
.in -1c
.SH "Detailed Description"
.PP 
Calculate sigma_d^2 using recurrence equations of Strobeck and Morgan (1978), and Hudson (1985)\&. 

\fBAuthor:\fP
.RS 4
Alan R\&. Rogers Strobeck and Morgan\&. 1978\&. The effect of intragenic recombination on the number of alleles in a finite population\&. Genetics 88: 829-844\&.
.RE
.PP
It also uses formula A6 (p 630) from
.PP
Hudson, Richard R\&. 1985\&. The sampling distribution of linkage disequilibrium under an infinite allele model without selection\&. Genetics, 109(3): 611-631\&.
.PP
Hudson showed that E[D^2] = Phi_AB - 2 Gamma_AB + Delta_AB
.PP
The parameter sigma_d^2 was defined by
.PP
Ohta, T\&. and Kimura, Motoo\&. 1971\&. Linkage disequilibrium between two segregating nucleotide sites under the steady flux of mutations in a finite population\&. Genetics 68(4): 571--580\&.
.PP
They defined it like this
.PP
sigma_d^2 = E[D^2]/E[(1-J_A)(1-J_B)]
.PP
where J_A = sum a_i^2, and J_B = sum b_i^2, where a_i and b_i are allele frequencies of the current generation at loci A and B\&. The denominator is thus the probability that two random genes from locus A differ, and two genes drawn independently from locus B also differ\&.
.PP
It can also be shown (I haven't found this in the literature) that
.PP
E[(1-J_A)(1-J_B)] = 1 - PhiA - PhiB + DeltaAB
.PP
The code below uses the formulas of Strobeck and Morgan to calculate the 5 identity coefficients, then uses these to calculate sigma_d^2\&.
.PP
\fBCopyright:\fP
.RS 4
Copyright (c) 2014, Alan R\&. Rogers <rogers@anthro.utah.edu>\&. This file is released under the Internet Systems Consortium License, which can be found in file 'LICENSE'\&. 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "static int \fBonestep\fP (const doubleyy1[], doubley2[], doubletwoN, doublec, doubleu)\fC [static]\fP"
.PP
Move the state vector forward one generation, using recurrence equations of Strobeck and Morgan (1978, see Eqn 3, p 833)\&. \fBParameters:\fP
.RS 4
\fIinput]\fP yy1 is the initial state vector\&. 
.br
\fIoutput]\fP y2 is the new state vector\&. 
.RE
.PP

.PP
Referenced by Strobeck_dydt(), and Strobeck_get_sigdsq()\&.
.SS "int \fBStrobeck_dydt\fP (doublet_notused, const doubleyy1[], doublef[], void *params)"
.PP
This function calculates the difference, from one generation to the next, for each of the 5 identity coefficients\&. It is based on equation 3 of Strobeck and Morgan\&.
.PP
y[0] = phiA y[1] = phiB y[2] = phiAB y[3] = gammaAB y[4] = deltaAB
.PP
\fBParameters:\fP
.RS 4
\fIyy1\fP is the current vector of identity coefficients\&. 
.br
\fIf\fP will contain the derivatives of y[], as approximated by the difference equations of Strobeck and Morgan\&. 
.br
\fIparams\fP points to a structure of type \fBdydt_params\fP\&. 
.RE
.PP

.PP
References onestep()\&.
.PP
Referenced by Strobeck_sigdsq()\&.
.SS "int \fBStrobeck_evolveDiscrete\fP (doubley[], \fBPopHist\fP *ph, doublec, doubleu)"
.PP
Evolve through all epochs of population history, using step size h and beginning with initial equilibrium\&. Calculation iterates difference equation\&. The initial value of y is set to equilibrium equation for equilibrium\&.
.PP
\fBParameters:\fP
.RS 4
\fIy\fP On return, y contains Hill's vector of moments\&. 
.br
\fIph\fP Describes the population's history\&. If ph contains just one epoch, y gets its equilibrium value\&. 
.br
\fIc\fP Recombination rate; overrides values in ph\&. 
.br
\fIu\fP Mutation rate\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Always returns 0\&. 
.RE
.PP

.PP
References iterate(), PopHist_duration(), PopHist_nepoch(), PopHist_twoN(), and Strobeck_geteq()\&.
.SS "double \fBStrobeck_get_sigdsq\fP (doubley[], inttwoNsmp)"
.PP
Calculate sigma_d^2 from state vector\&. The formulas involved are in the comment at the top of this file\&.
.PP
\fBParameters:\fP
.RS 4
\fIy\fP State vector, whose entries represent PhiA, PhiB, PhiAB, GammaAB, and DeltaAB\&. 
.br
\fIn\fP Number of gene copies in sample\&. If n==0, then no bias correction is done\&. 
.RE
.PP

.PP
References onestep()\&.
.PP
Referenced by Strobeck_sigdsq(), and Strobeck_sigdsqEq()\&.
.SS "int \fBStrobeck_geteq\fP (doublex[], doubletwoN, doublec, doubleu)"
.PP
Fill x vector with equilibrium values given on pp 833-834 of Strobeck and Morgan\&. Strobeck and Morgan separate 3 cases, for c << u, c >> u, and c ~= u\&. I did some experiments to figure out how to bound these ranges, and decided never to use the formula for large c\&. 
.PP
Referenced by Strobeck_evolveDiscrete(), Strobeck_sigdsq(), and Strobeck_sigdsqEq()\&.
.SH "Variable Documentation"
.PP 
.SS "const char* stateLbl[DIM]\fC [static]\fP"\fBInitial value:\fP
.PP
.nf
 { 'phiA',
    'phiB',
    'phiAB',
    'gammaAB',
    'deltaAB'
}
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for ldpsiz from the source code\&.
